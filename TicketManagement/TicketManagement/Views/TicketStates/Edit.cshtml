@model TicketManagement.ViewModels.EditTicketStateViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Ticket States</h2>
<hr />


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Edit</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.TicketState.Id)
        @Html.HiddenFor(model => model.TicketState.Created)

        <div class="form-group">
            @Html.LabelFor(model => model.TicketState.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                
                @if (Model.IsEditable)
                {
                    @Html.EditorFor(model => model.TicketState.Name, new {htmlAttributes = new {@class = "form-control"}})
                }
                else
                {
                    @:<input id="Name" name="Name" type="text" value="@Model.TicketState.Name" class="form-control text-box single-line" data-val="true" disabled="disabled"/>
                    @Html.HiddenFor(model => model.TicketState.Name)
                }

                @Html.ValidationMessageFor(model => model.TicketState.Name, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TicketState.Colour, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TicketState.Colour, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TicketState.Colour, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

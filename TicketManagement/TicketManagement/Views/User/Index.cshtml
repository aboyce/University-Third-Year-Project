@using TicketManagement.Management
@using TicketManagement.Models.Entities
@model TicketManagement.Models.Entities.User

@{
    ViewBag.Title = "User";
    Layout = "~/Views/Shared/_Layout_Standard.cshtml";

    string archived = @Model.IsArchived ? "checked=\"checked\"" : string.Empty;
    string teamLeader = @Model.IsTeamLeader ? "checked=\"checked\"" : string.Empty;
}

<h2>My Account</h2>
<hr />

@if (Request.Params["ViewMessage"] == "ChangePasswordSuccess")
{
    <div class="alert alert-success alert-dismissable" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <b>Success</b> Your password has been changed.
    </div>
}
@if (Request.Params["ViewMessage"] == "UserTokenGenerated")
{
    <div class="alert alert-success alert-dismissable" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <b>Success</b> A new User Token has been generated.
    </div>
}
@if (Request.Params["ViewMessage"] == "UserTokenGenerationFailed")
{
    <div class="alert alert-danger alert-dismissable" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <b>Error</b> An error occured when generating a new User Token.
    </div>
}
@if (Request.Params["ViewMessage"] == "UserTokenSentViaText")
{
    <div class="alert alert-success alert-dismissable" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <b>Success</b> Your User Token has been sent to you via text.
    </div>
}
@if (Request.Params["ViewMessage"] == "UserTokenSentViaTextFailed")
{
    <div class="alert alert-danger alert-dismissable" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <b>Error</b> An error occured when texting your User Token [ Error: @ViewBag.ErrorMessage ].
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h3>Edit</h3>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @*Form Elements*@

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (User.IsInRole(MyRoles.Administrator))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsArchived, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.IsArchived)
                    @Html.ValidationMessageFor(model => model.IsArchived, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsTeamLeader, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.IsTeamLeader)
                    @Html.ValidationMessageFor(model => model.IsTeamLeader, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Team, "Team", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    @Html.DropDownList("Teams", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Team, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    <input class="form-control" type="text" placeholder="@Model.UserName" disabled="disabled">
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    <input class="form-control" type="text" placeholder="@Model.Email" disabled="disabled">
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsArchived, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    <input class="checkbox" @archived disabled="disabled" type="checkbox">
                    @Html.ValidationMessageFor(model => model.IsArchived, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsTeamLeader, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-6">
                    <input class="checkbox" @teamLeader disabled="disabled" type="checkbox">
                    @Html.ValidationMessageFor(model => model.IsTeamLeader, "", new { @class = "text-danger" })
                </div>
            </div>

            if (Model.Team != null)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.Team.Name, "Team", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-6">
                        <input class="form-control" type="text" placeholder="@Model.Team.Name" disabled="disabled">
                        @Html.ValidationMessageFor(model => model.Team.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    <label class="control-label col-md-4">Team Assigned</label>
                    <div class="col-md-6">
                        <input class="checkbox" disabled="disabled" type="checkbox">
                    </div>
                </div>
            }
        }

        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.MobileApplicationConfirmed)
        @Html.HiddenFor(model => model.UserToken)
        @Html.HiddenFor(model => model.UserName)
        @Html.HiddenFor(model => model.Email)
        @Html.HiddenFor(model => model.PasswordHash)
        @Html.HiddenFor(model => model.SecurityStamp)
        @Html.HiddenFor(model => model.EmailConfirmed)
        @Html.HiddenFor(model => model.PhoneNumberConfirmed)
        @Html.HiddenFor(model => model.TwoFactorEnabled)
        @Html.HiddenFor(model => model.LockoutEndDateUtc)
        @Html.HiddenFor(model => model.LockoutEnabled)
        @Html.HiddenFor(model => model.AccessFailedCount)
        @Html.HiddenFor(model => model.Created)
        @Html.HiddenFor(model => model.LastUpdated)

        @*Form Buttons*@
        <div class="form-group">
            <div class="col-md-offset-4 col-md-8">
                <input type="submit" value="Save" class="btn btn-default" />
                @Html.ActionLink("Cancel", "Index", "Organisations", null, new { @class = "btn btn-danger" })
            </div>
        </div>
    </div>
}

@*Mobile Application User Token*@
<div class="row">
    <div class="col-md-12">
        <h3>User Token</h3>
        <hr />
        <div class="row">
            <div class="col-md-3">
                <p>
                    <strong>User Token Confirmed: </strong>
                    @if (Model.MobileApplicationConfirmed)
                    { <i class="fa fa-check"></i> }
                    else { <i class="fa fa-times"></i> }
                </p>
            </div>
            <div class="col-md-5">
                <p><strong>User Token: </strong> @Model.UserToken</p>
            </div>
            @using (Html.BeginForm("GenerateNewUserToken", "User", new { userId = Model.Id }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <div class="col-md-2">
                    <input type="submit" value="Generate User Token" class="btn btn-danger"
                           title="Remove the old and generate a new user token"
                           onclick="return confirm('Are you sure you want to generate a new Token? Any devices using the old one will have to be re-authorised.')"/>            
                </div>
            }
            @using (Html.BeginForm("TextUserToken", "User", new { userId = Model.Id }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <div class="col-md-2">
                    <input type="submit" value="Text User Token" class="btn btn-warning"
                           title="Send the User Token to your Mobile device."
                           onclick="return confirm('Are you sure you want to send the message?')" />
                </div>
            }
        </div>
    </div>
</div>

@*Change Password*@
<div class="row">
    <div class="col-md-12">
        <h3>Change Password</h3>
        <hr />
        @Html.ActionLink("Change Password", "ChangePassword", "User", null, new { @class = "btn btn-info col-md-offset-3" })
    </div>
</div>

@*Linking to External Sites*@
<div class="row">
    <div class="col-md-12">
        <h3>External Sites</h3>
        <hr />
        @Html.ActionLink("Configure External Sites", "ManageLogins", "User", null, new { @class = "btn btn-info col-md-offset-3" })
    </div>
</div>

<br />
<br />
Enable-Migrations -ContextTypeName ApplicationContext -MigrationsDirectory Migrations\Application
Enable-Migrations -ContextTypeName TicketManagementContext -MigrationsDirectory Migrations\Entities


Add-Migration -ConfigurationTypeName TicketManagement.Migrations.Application.Configuration 'Initial'
Add-Migration -ConfigurationTypeName TicketManagement.Migrations.Entities.Configuration 'Initial'


Update-Database -ConfigurationTypeName TicketManagement.Migrations.Application.Configuration -Verbose
Update-Database -ConfigurationTypeName TicketManagement.Migrations.Entities.Configuration -Verbose


protected override void Seed(TicketManagement.Models.Context.TicketManagementContext context)
        {
            //  This method will be called after migrating to the latest version.

			context.Roles.AddOrUpdate(
                new IdentityRole { Name = "Approved" },
                new IdentityRole { Name = "Internal"},
                new IdentityRole { Name = "Administrator" });

            ApplicationUser admin = new ApplicationUser { UserName = "Admin", Email = "admin@email.com", EmailConfirmed = true };

            var userManager = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>(context));
            userManager.AddToRole(admin.Id, "Administrator");

            context.Users.AddOrUpdate(admin);

            context.Organisations.AddOrUpdate(
                new Organisation { Name = "My Company", IsInternal = true, DefaultContact = null, Created = DateTime.Now, LastUpdated = DateTime.Now },
                new Organisation { Name = "Client", IsInternal = false, DefaultContact = null, Created = DateTime.Now, LastUpdated = DateTime.Now });

            context.Teams.AddOrUpdate(
                new Team { Name = "Support", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new Team { Name = "Management", Created = DateTime.Now, LastUpdated = DateTime.Now });

            context.Projects.AddOrUpdate(
                new Project { Name = "First Application", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new Project { Name = "Second Application", Created = DateTime.Now, LastUpdated = DateTime.Now });

            context.TicketCategories.AddOrUpdate(
                new TicketCategory { Name = "Question", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new TicketCategory { Name = "Bug", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new TicketCategory { Name = "Feature", Created = DateTime.Now, LastUpdated = DateTime.Now });

            context.TicketPriorities.AddOrUpdate(
                new TicketPriority { Name = "Feature", Colour = "#0066FF", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new TicketPriority { Name = "Low", Colour = "#00CC00", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new TicketPriority { Name = "Medium", Colour = "#FF6600", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new TicketPriority { Name = "High", Colour = "#FF0000", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new TicketPriority { Name = "Emergency", Colour = "#800000", Created = DateTime.Now, LastUpdated = DateTime.Now });

            context.TicketStates.AddOrUpdate(
                new TicketState { Name = "Pending Approval", Colour = "#009900", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new TicketState { Name = "Open", Colour = "#CCFFFF", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new TicketState { Name = "Awaiting Response", Colour = "#FFFFFF", Created = DateTime.Now, LastUpdated = DateTime.Now },
                new TicketState { Name = "Closed", Colour = "#FF0000", Created = DateTime.Now, LastUpdated = DateTime.Now });
        }


protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<ApplicationUser>().ToTable("ApplicationUsers");
            modelBuilder.Entity<IdentityUserRole>().ToTable("UserRoles");
            modelBuilder.Entity<IdentityUserLogin>().ToTable("UserLogins");
            modelBuilder.Entity<IdentityUserClaim>().ToTable("UserClaims");
            modelBuilder.Entity<IdentityRole>().ToTable("Roles");
        }